# 23种设计模式

## 定义

设计模式（Design Patterns）是软件开发中面临的常见问题的可复用解决方案。这些模式是经过总结和优化的最佳实践，用于提高代码的可维护性、可重用性和可扩展性。

## 组成部分

### 1.模式名称

设计模式的简洁名称，便于讨论和使用。

### 2.问题

设计模式解决的特定问题及其上下文。

### 3.解决方案

解决问题的核心设计和实现方式。

### 4.效果

应用该设计模式后的结果和优缺点。

## 结构形式

设计模式可以通过类图、对象图和描述文字来展示其结构和参与者之间的关系。

1.类图：展示类和接口及其关系。
2.对象图：展示对象在运行时的实例及其关系。
3.描述文字：详细描述模式的目的、适用范围和实现细节。

## 分类

设计模式根据其用途和适用范围分为三大类：

### 创建型模式：对象的创建方式

1.单例模式（Singleton）
2.工厂方法模式（Factory Method）
3.抽象工厂模式（Abstract Factory）
4.建造者模式（Builder）
5.原型模式（Prototype）

### 结构型模式：对象和类的组合

1.适配器模式（Adapter）
2.桥接模式（Bridge）
3.组合模式（Composite）
4.装饰器模式（Decorator）
5.外观模式（Facade）
6.享元模式（Flyweight）
7.代理模式（Proxy）

### 行为型模式：对象之间的交互方式

1.责任链模式（Chain of Responsibility）
2.命令模式（Command）
3.解释器模式（Interpreter）
4.迭代器模式（Iterator）
5.中介者模式（Mediator）
6.备忘录模式（Memento）
7.观察者模式（Observer）
8.状态模式（State）
9.策略模式（Strategy）
10模板方法模式（Template Method）
11.访问者模式（Visitor）

## 目的

设计模式的主要目的是提供经过验证的解决方案，帮助开发者在不同情境下设计出高质量的软件系统。

## 基本原理

设计模式通过总结软件开发中的最佳实践，提供了系统化的方法来解决特定的设计问题。它们通过描述类和对象之间的关系和交互方式，指导开发者构建灵活和高效的系统。